{
	"C++ Competitive Format Block": {
		"prefix": "#include",
		"body": [
			"#include<bits/stdc++.h>",
			"using namespace std;",
			" ",
			"",
			"$0",
			" ",
			" ",
			" "
			"int main()",
			"{",
			"    $1",
			" ",
			" ",
			" ",
			"    return 0;",
			"}"
		],
		"description": "Template Program"
	},
	
		"#inc": {
		  "prefix": "#inc",
		  "body": ["#include "],
		  "description": "snippet for #include"
		},
	  
		"using": {
		  "prefix": "using",
		  "body": ["using namespace $0"],
		  "description": "snippet for using namespace"
		},
	  
		"for": {
		  "prefix": "for",
		  "body": ["for (int ${1} = ${2:0}; ${1} < ${3:length}; ${1}++)", "{", "\t$0", "}\n"],
		  "description": "snippet for a for loop"
		},
	  
		"foreach": {
		  "prefix": "fore",
		  "body": ["for (auto &$1 : $2)", "{", "\t$0", "}\n"],
		  "description": "snippet for a for-auto loop"
		},
		"cout1": {
			"prefix": "cout1",
			"body": [
				"std::cout << \"${1:/* message */}\" << std::endl;"
			],
			"description": "Code snippet for printing to std::cout, provided the header is set"
		},
		"cout2": {
			"prefix": "cout2",
			"body": [
				"std::cout << \"${1:/* message */}\" << ${2:var} << std::endl;"
			],
			"description": "Code snippet for printing to std::cout, provided the header is set"
		},


	  
		"do": {
		  "prefix": "do",
		  "body": ["do", "{", "\t$0", "} while($1);\n"],
		  "description": "snippet for a do...while loop"
		},
	  
		"while": {
		  "prefix": "while",
		  "body": ["while ($1)", "{", "\t$0", "}\n"],
		  "description": "snippet for a while loop"
		},
	  
		"if": {
		  "prefix": "if",
		  "body": ["if ($1)", "{", "\t$0", "}"],
		  "description": "snippet for an if statement"
		},
	  
		"else": {
		  "prefix": "else",
		  "body": ["else", "{", "\t$0", "}\n"],
		  "description": "snippet for else"
		},
	  
		"else if": {
		  "prefix": "else if",
		  "body": ["else if ($1)", "{", "\t$0", "}"],
		  "description": "snippet for else-if"
		},
	  
		"enum": {
		  "prefix": "enum",
		  "body": ["enum $1", "{", "\t$0", "};\n"],
		  "description": "snippet for an enum declaration"
		},
	  
		"class": {
		  "prefix": "class",
		  "body": ["class $0", "{", "", "};\n"],
		  "description": "snippet for a class declaration"
		},
	  
		"class inherit": {
		  "prefix": "classi",
		  "body": ["class $1 :public $0", "{", "", "};\n"],
		  "description": "snippet for a class-inherit declaration"
		},
	  
		"namespace": {
		  "prefix": "namespace",
		  "body": ["namespace $1", "{", "\t$0", "}//$1\n"]
		},
	  
		"#ifndef": {
		  "prefix": "#ifndef",
		  "body": [
			"#ifndef __${TM_FILENAME_BASE/(.*)/${1:/upcase}/}__H__",
			"#define __${TM_FILENAME_BASE/(.*)/${1:/upcase}/}__H__",
			"$0",
			"#endif  //!__${TM_FILENAME_BASE/(.*)/${1:/upcase}/}__H__"
		  ],
		  "description": "snippet for #ifndef"
		},
	  
		"#ifdef": {
		  "prefix": "#ifdef",
		  "body": ["#ifdef  ${1}", "$0", "#endif  //$1"],
		  "description": "snippet for #if"
		},
	  
		"struct": {
		  "prefix": "struct",
		  "body": ["struct $1", "{", "\t$0", "};\n"],
		  "description": "snippet for a struct declaration"
		},
	  
		"switch": {
		  "prefix": "switch",
		  "body": [
			"switch ($1)",
			"{",
			"  case $2:",
			"\t$0",
			"\tbreak;",
			"\n",
			"\n",
			"  default:",
			"\tbreak;",
			"}"
		  ],
		  "description": "snippet for a switch statement"
		},
	  
		"case": {
		  "prefix": "case",
		  "body": ["  case $1:", "\t$0", "\tbreak;"],
		  "description": "snippet for case (...)"
		},
	  
		"try": {
		  "prefix": "try",
		  "body": ["try", "{", "\t$1", "}", "catch (const std::exception& $2)", "{", "\t$0", "}\n"],
		  "description": "snippet for a try-catch block"
		},
	  
		"union": {
		  "prefix": "union",
		  "body": ["union $1", "{", "\t$0", "};\n"],
		  "description": "snippet for a union declaration"
		},
	  
		"#def": {
		  "prefix": "#def",
		  "body": ["#define  $1  $2\n"],
		  "description": "snippet for #def"
		},
	  
		"main": {
		  "prefix": "main",
		  "body": [
			"int\tmain(int argc, char **argv)",
			"{",
			"\t$0",
	  
			"\n",
			"\tsystem(\"pause\");",
			"\treturn 0;",
			"}\n"
		  ],
		  "description": "snippet for a main function declaration"
		},
	  
		"fileheader": {
		  "prefix": "fileheader",
		  "body": [
			"/**",
			"**********************************************************************************************************************************************************************************************************************************",
			"* @file:\t$TM_FILENAME",
			"* @author:\t$1",
			"* @date:\t$CURRENT_YEAR年$CURRENT_MONTH月$CURRENT_DATE日 $CURRENT_HOUR:$CURRENT_MINUTE:$CURRENT_SECOND $CURRENT_DAY_NAME",
			"* @brief:\t$2",
			"**********************************************************************************************************************************************************************************************************************************",
			"**/"
		  ],
		  "description": "snippet for a file header"
		},
	  
		"template MV": {
		  "prefix": "template MV",
		  "body": ["template <typename $0>"],
		  "description": "snippet for a template"
		},

		"Print function MV": {
			"prefix": "print  MV",
			"body": [
			  "template <typename T>",
			  "void print(vector<T> a)",
			  "{",
			  "    for (int i = 0; i < a.size(); i++)",
			  "    {",
			  "        std::cout << i<<\"...\"<< a[i] << std::endl;",
			  "        ",
			  "    }",
			  "    ",
			  "",
			  "}"
			],
			"description": "Print function MV"
		  },
		    "class Node MV": {
			"prefix": "class node",
			"body": [
				"class Node",
				"{",
				"    public:",
				"        int data;",
				"        Node *left;",
				"        Node *right;",
				"   ",
				"        Node(int data){",
				"            this->data = data;",
				"            left = NULL;",
				"            right = NULL;",
				"        }    ",
				"};"
			],
			"description": ""
			},

			"Vector-Array": {
 			"prefix": "array",
  			"body": [
   					 "vector<int> v = { 1,2,3,4,5,6,7};"
  					],
  			"description": "Vector-Array"
           },
		   
		   "random_array": {
			"prefix": "random_array",
			"body": [
			  "int arr[10]",
			  "for (int i = 0; i < 10; ++i){",
			  "arr[i] = rand()%10;",
			  "}"
			],
			"description": "random_array"
		  },

		  "print-array": {
			"prefix": "print-array",
			"body": [
			  "for (int i = 0; i < 10; ++i)",
			  "{",
			  "cout << arr[i] << endl;",
			  "",
			  "}"
			],
			"description": "print-array"
		  }
	  }
